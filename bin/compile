#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

### Configure environment

set -o errexit    # always exit on error
set -o pipefail   # don't ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants

DEFAULT_CACHE="node_modules bower_components"

### Configure directories

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)

mkdir -p "$BUILD_DIR/.heroku/node/"
cd $BUILD_DIR
export PATH="$BUILD_DIR/.heroku/node/bin":$PATH

LOG_FILE='/tmp/node-build-log.txt'
echo "" > "$LOG_FILE"

### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

### Handle errors

handle_failure() {
  header "Build failed"
  warn_untracked_dependencies "$LOG_FILE"
  warn_angular_resolution "$LOG_FILE"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false

### Failures that should be caught immediately

fail_invalid_package_json "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Compile

create_env() {
  write_profile "$BP_DIR" "$BUILD_DIR"
  write_export "$BP_DIR" "$BUILD_DIR"
  export_env_dir "$ENV_DIR"
  create_default_env
}

header "Creating runtime environment"
create_env # can't pipe the whole thing because piping causes subshells, preventing exports
list_node_config | output "$LOG_FILE"

install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")

  if [ -n "$iojs_engine" ]; then
    echo "engines.iojs (package.json):  $iojs_engine (iojs)"
  else
    echo "engines.node (package.json):  ${node_engine:-unspecified}"
  fi
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  if [ -n "$iojs_engine" ]; then
    warn_node_engine "$iojs_engine"
    install_iojs "$iojs_engine" "$BUILD_DIR/.heroku/node"
    echo "Using bundled npm version for iojs compatibility: `npm --version`"
  else
    warn_node_engine "$node_engine"
    install_nodejs "$node_engine" "$BUILD_DIR/.heroku/node"
    install_npm "$npm_engine" "$BUILD_DIR/.heroku/node"
  fi
  warn_old_npm
}

header "Installing binaries"
install_bins | output "$LOG_FILE"

restore_cache() {
  local cache_status="$(get_cache_status)"

  if [ "$cache_status" == "valid" ]; then
    local cache_directories=$(get_cache_directories)
    if [ "$cache_directories" == "" ]; then
      echo "Loading 2 from cacheDirectories (default):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$DEFAULT_CACHE"
    else
      echo "Loading $(echo $cache_directories | wc -w | xargs) from cacheDirectories (package.json):"
      restore_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
    fi
  else
    echo "Skipping cache restore ($cache_status)"
  fi
}

header "Restoring cache"
restore_cache | output "$LOG_FILE"

build_dependencies() {
  run_if_present 'heroku-prebuild'
  if $PREBUILD; then
    echo "Prebuild detected (node_modules already exists)"
    rebuild_node_modules "$BUILD_DIR"
  else
    install_node_modules "$BUILD_DIR"
  fi
  run_if_present 'heroku-postbuild'
}

header "Building dependencies"
build_dependencies | output "$LOG_FILE"


indent() {
  sed -u 's/^/       /'
}

#echo "-----> Found a hello.txt"

# if hello.txt is empty, abort the build
#if [ ! -s $1/hello.txt ]; then
#  echo "hello.txt was empty" | indent
#  exit 1
#fi

# replace hello with goodbye in a new file
#cat $1/hello.txt | sed -e "s/[Hh]ello/Goodbye/g" > $1/goodbye.txt

#
#
#


    echo "Zapp360-Sigma compilation started!" | indent
    echo "Zapp360-Sigma compilation started!" | indent
    echo "Zapp360-Sigma compilation started!" | indent
    echo "Zapp360-Sigma compilation started!" | indent
    echo "Zapp360-Sigma compilation started!" | indent

echo "BUILD_DIR - $BUILD_DIR"
echo "CACHE_DIR - $CACHE_DIR"
echo "ENV_DIR - $ENV_DIR"

    echo "Zapp360-Sigma compilation started!" | indent
    echo "Zapp360-Sigma compilation started!" | indent
    echo "Zapp360-Sigma compilation started!" | indent
    echo "Zapp360-Sigma compilation started!" | indent
    echo "Zapp360-Sigma compilation started!" | indent

npm install -g bower grunt-cli grunt gulp
npm install bower grunt-cli grunt gulp
#sudo npm install -g bower grunt-cli gulp
#sudo npm install -g generator-angular
#npm install
#bower install

#sudo gem update --system
#sudo gem install compass
#sudo npm install -g grunt-contrib-compass
gem update --system
##gem install sass
##gem install -n /app/vendor/ruby-2.3.0/bin/gem compass
##gem install compass

# install compass
echo "Installing Compass"
export GEM_HOME=$1/.gem/ruby/2.3.0
PATH="$GEM_HOME/bin:$PATH"
HOME=$1 gem install compass --user-install --no-rdoc --no-ri


echo "Building runtime environment"
mkdir -p $1/.profile.d
echo "export PATH=\"\$HOME/vendor/node/bin:\$HOME/bin:\$HOME/node_modules/.bin:\$PATH\";" > $1/.profile.d/nodejs.sh
echo "export PATH=\"\$HOME/.gem/ruby/2.3.0/bin:\$PATH\"" > $1/.profile.d/ruby.sh

npm install -g grunt-contrib-compass

npm install -g jshint

##grunt build
##grunt install
npm install --save gifsicle
npm install grunt-contrib-imagemin

npm install
bower install
#grunt build


echo "Debug point here"
echo "Debug point here"
echo "Debug point here"
echo "Debug point here"


##apt-get install ruby-compass

##PATH=/app/vendor/ruby-2.3.0/bin/gem:$PATH
##echo "PATH=\$PATH:/var/lib/gems/2.3/bin:\$HOME/.gem/ruby/2.3/bin" >> /etc/profile.d/rubygems2.3.sh
ruby -v
compass -v

echo "Debug point here"
echo "Debug point here"
echo "Debug point here"
echo "Debug point here"

node -v

echo "Debug point here"
echo "Debug point here"
echo "Debug point here"
echo "Debug point here"

#
#
#


#sh $1/build-buildpack.sh

echo Running grunt build tool...
rm -r $1/dist/
#rm -r app/selfservice/dist/
rm -r $1/app/demotool/dist/
#rm -r app/tagpreview/dist/

echo Running jshint...

jshintFILES="$1/server/controllers/
$1/server/izolib/
$1/server/lib
$1/server/routes
$1/app/scripts/
$1/app/thirdParty
$1/app/demotool/app/scripts
$1/app/demotool/app/thirdParty"
for f in $jshintFILES
do
    var=$(jshint "$f" | tail -1)
    echo "
    !+!
    !+!
    !+!+!
    !+!+!+!
    !+!+!+!+!
    !+!+!+!+!+!
    !+!+!+!+!+!+!
    "
    echo "!+!+!+!+!+!+!+! $var !+!+!+!+!+!+!+! in $f folder"
    echo "
    !+!+!+!+!+!+!
    !+!+!+!+!+!
    !+!+!+!+!
    !+!+!+!
    !+!+!
    !+!
    !+!
    "
done

echo Running grunt build tool \for self service...

cd $1/app/selfservice/
#grunt build
#cd ../

cd $1/demotool/
echo Running grunt build tool \for client service...
grunt build
#cd ../

cd $1/tagpreview/
echo Running grunt build tool \for tagpreview...
#grunt build
#cd ../../

echo Running grunt build tool \for console...
grunt build
echo Copying dist SS...
cp -avR $1/app/selfservice/dist $1/dist/selfservice

echo Copying dist clientservice...
cp -avR $1/app/demotool/dist $1/dist/demotool
cp -avR $1/app/demotool/app/assets $1/dist/demotool/assets
mkdir -p $1/dist/demotool/app/
cp -avR $1/app/demotool/app/assets $1/dist/demotool/app/
cp -avR $1/app/demotool/bower_components/intl-tel-input $1/dist/demotool/bower_components/intl-tel-input

echo Copying dist externaltagpreview...
#cp -avR app/tagpreview/dist dist/tagpreview

echo Copying index SS...
cp $1/dist/selfservice/index.html $1/server/views/selfservice.ejs

echo Copying index clientservice...
cp $1/dist/demotool/index.html $1/server/views/clientservice.ejs

echo Copying index externaltagpreview...
cp $1/dist/tagpreview/index.html $1/server/views/tagpreview.ejs

echo Copying tag preview...
cp -avR $1/app/externalTagPreview/dist $1/dist/externalTagPreview

echo Copying index tag preview...
cp $1/dist/externalTagPreview/tag_preview.html $1/server/views/tag_preview.ejs

echo Copying index...
cp $1/dist/index.html $1/server/views/index.ejs

echo Copying login...
cp $1/dist/login.html $1/server/views/login.ejs

echo Copying reset...
cp $1/dist/reset.html $1/server/views/reset.ejs

echo Copying forgot...
cp $1/dist/forgot.html $1/server/views/forgot.ejs

echo Copying request-access...
cp $1/dist/request-access.html $1/server/views/request-access.ejs

echo Copying reset-sent...
cp $1/dist/reset-sent.html $1/server/views/reset-sent.ejs

# izo validators
echo Copying validators...
cp $1/app/thirdParty/validators/company.js $1/server/izolib/validators/company.js
cp $1/app/thirdParty/validators/campaign.js $1/server/izolib/validators/campaign.js
cp $1/app/thirdParty/validators/user.js $1/server/izolib/validators/user.js
cp $1/app/thirdParty/validators/advertiser.js $1/server/izolib/validators/advertiser.js


#cache_build() {
#  local cache_directories=$(get_cache_directories)
#
#  echo "Clearing previous node cache"
#  clear_cache
#  if ! ${NODE_MODULES_CACHE:-true}; then
#    echo "Skipping cache save (disabled by config)"
#  elif [ "$cache_directories" == "" ]; then
#    echo "Saving 2 cacheDirectories (default):"
#    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" "$DEFAULT_CACHE"
#  else
#    echo "Saving $(echo $cache_directories | wc -w | xargs) cacheDirectories (package.json):"
#    save_cache_directories "$BUILD_DIR" "$CACHE_DIR" $cache_directories
#  fi
#  save_signature
#}
#
#header "Caching build"
#cache_build | output "$LOG_FILE"
#
#summarize_build() {
#  cd $BUILD_DIR
#  (npm ls --depth=0 | tail -n +2 || true) 2>/dev/null
#}
#
#header "Build succeeded!"
#summarize_build | output "$LOG_FILE"
